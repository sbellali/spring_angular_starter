#!/bin/bash

source .env > /dev/null 2>&1


function backend_banner(){
    echo " ___       _ _     ____             _                  _   ____            _           _   "
    echo " |_ _|_ __ (_) |_  | __ )  __ _  ___| | _____ _ __   __| | |  _ \ _ __ ___ (_) ___  ___| |_ "
    echo "  | || '_ \| | __| |  _ \ / _\` |/ __| |/ / _ \ '_ \ / _\` | | |_) | '__/ _ \| |/ _ \/ __| __|"
    echo "  | || | | | | |_  | |_) | (_| | (__|   <  __/ | | | (_| | |  __/| | | (_) | |  __/ (__| |_ "
    echo " |___|_| |_|_|\__| |____/ \__,_|\___|_|\_\___|_| |_|\__,_| |_|   |_|  \___// |\___|\___|\__|"
    echo "                                                                         |__/               "
}

function frontend_banner() {
    echo "  ___       _ _     _____                _                 _   ____            _           _   "
    echo " |_ _|_ __ (_) |_  |  ___| __ ___  _ __ | |_ ___ _ __   __| | |  _ \ _ __ ___ (_) ___  ___| |_ "
    echo "  | || '_ \| | __| | |_ | '__/ _ \| '_ \| __/ _ \ '_ \ / _\` | | |_) | \'__/ _ \| |/ _ \/ __| __|"
    echo "  | || | | | | |_  |  _|| | | (_) | | | | ||  __/ | | | (_| | |  __/| | | (_) | |  __/ (__| |_ "
    echo " |___|_| |_|_|\__| |_|  |_|  \___/|_| |_|\__\___|_| |_|\__,_| |_|   |_|  \___// |\___|\___|\__|"
    echo "                                                                            |__/               "
}

function build_banner() {
    echo "  ____        _ _     _   ____            _           _   "
    echo " | __ ) _   _(_) | __| | |  _ \ _ __ ___ (_) ___  ___| |_ "
    echo " |  _ \| | | | | |/ _\` | | |_) | '__/ _ \| |/ _ \/ __| __|"
    echo " | |_) | |_| | | | (_| | |  __/| | | (_) | |  __/ (__| |_ "
    echo " |____/ \__,_|_|_|\__,_| |_|   |_|  \___// |\___|\___|\__|"
    echo "                                       |__/               "
}

function banner() {
    echo "    __  _  __ ____ |  |   ____  ____   _____   ____  "
    echo "\ \/ \/ // __ \|  | _/ ___\/  _ \ /     \_/ __ \ "
    echo " \     /\  ___/|  |_\  \__(  <_> )  Y Y  \  ___/ "
    echo "  \/\_/  \___  >____/\___  >____/|__|_|  /\___  >"
    echo "             \/          \/            \/     \/ "
}

function banner_separation() {
    echo "###########################################################################################################"""
}

function is_valid_string() {
    local string=$1
    local regex="^([A-Za-z]+\.){0,}[A-Za-z]+$"

    if [[ $string =~ $regex ]]; then
        return 0
    else
        return 1
    fi
}

# Function to get user selection from a list of options
function get_selection() {
    local prompt="$1"
    shift
    local options=("$@")

    local PS3="$prompt "
    select opt in "${options[@]}"
    do
        if [[ " ${options[*]} " == *" $opt "* ]]; then
            echo "$opt"
            break
        fi
    done
}

# Function to get user input and validate against a given regex pattern
function get_input() {
    local default_value="$1"
    local prompt="$2"
    local pattern="$3"
    local input

    while true; do
        read -p "$prompt ($default_value): " input
        input=${input:-"$default_value"}
        if [[ "$input" =~ $pattern ]]; then
            echo "$input"
            break
        fi
    done
}

function get_boot_version() {
    local boot_options=("3.2.0-SNAPSHOT" "3.2.0-M1" "3.1.3-SNAPSHOT" "3.1.2" "3.0.10-SNAPSHOT" "3.0.9" "2.7.15-SNAPSHOT" "2.7.14")
    get_selection "Please choose a Spring Boot version:" "${boot_options[@]}"
}


function get_java_version() {
    local java_options=("20" "17" "11" "8")
    get_selection "Please choose a JAVA version:" "${java_options[@]}"
}


function get_group_id() {
    local default_group_id="com.example"
    local pattern="^([A-Za-z]+\.){1,}[A-Za-z]+$"
    get_input "$default_group_id" "Please enter a valid group" "$pattern"
}


function get_artifact_id() {
    local default_artifact_id="demo"
    local pattern="^[A-Za-z]+$"
    get_input "$default_artifact_id" "Please enter a valid artifact" "$pattern"
}


function get_database_name() {
    local default_database_name="myDatabase"
    local pattern="^[A-Za-z]+$"
    get_input "$default_database_name" "Please enter a valid database name" "$pattern"
}



# SBS: Spring Boot Starter
function init_backend_project() {
    backend_banner
    if [ -e "./backend/pom.xml" ]; then
        echo "The project appears to be already initialized; if the issue persists, please re-clone the repository"
        return 0
    fi


    local SBS_API_QUERY_STRING="https://start.spring.io/starter.zip?"

    local SBS_API_VAR_type="maven-project"
    local SBS_API_VAR_language="java"
    local SBS_API_VAR_bootVersion=$(get_boot_version)
    local SBS_API_VAR_groupId=$(get_group_id)
    local SBS_API_VAR_artifactId=$(get_artifact_id)
    local SBS_API_VAR_description="Project for Spring Boot"
    local SBS_API_VAR_name=$SBS_API_VAR_artifactId
    local SBS_API_VAR_baseDir=$SBS_API_VAR_artifactId
    local SBS_API_VAR_packageName=${SBS_API_VAR_groupId}.${SBS_API_VAR_artifactId}
    local SBS_API_VAR_packaging="jar"
    local SBS_API_VAR_javaVersion=$(get_java_version)
    local SBS_API_VAR_dependencies="web,data-jpa,mysql,devtools"

    for varname in ${!SBS_API_VAR*}
    do
       local value=${!varname}
       local queryVarname=${varname:12}
       SBS_API_QUERY_STRING="${SBS_API_QUERY_STRING}${queryVarname}=${value// /%20}&"
    done
    sed -i "s/JAVA_VERSION_TAG.*$/JAVA_VERSION_TAG=${SBS_API_VAR_javaVersion}/" .env
    curl -o ./backend/${SBS_API_VAR_name}.zip $SBS_API_QUERY_STRING
    unzip ./backend/${SBS_API_VAR_name}.zip -d ./backend/
    mv ./backend/${SBS_API_VAR_name}/src ./backend/${SBS_API_VAR_name}/pom.xml ./backend
    rm -rf ./backend/${SBS_API_VAR_name} ./backend/${SBS_API_VAR_name}.zip
    cat > ./backend/src/main/resources/application.properties << EOF
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://db:3306/$MYSQL_DATABASE
spring.datasource.username=$MYSQL_USER
spring.datasource.password=$MYSQL_PASSWORD
EOF
}

function create_ng_project()
{
    docker run -it --rm \
        -v $(pwd)/frontend:/app \
        -w /app \
        -u $(id -u):$(id -g) \
        sbellali/angular-cli:latest ng new app -g
    mv ./frontend/app/* ./frontend/app/.vscode ./frontend/app/.editorconfig ./frontend/app/.gitignore ./frontend/
    rm -fr ./frontend/app
}

function init_frontend_project() {
    frontend_banner
    if [ -e "./frontend/package.json" ]; then
        echo "The project appears to be already initialized; if the issue persists, please re-clone the repository"
        return 0
    fi
    create_ng_project
    sed -i 's/"start": "ng serve",/"start": "ng serve  --host 0.0.0.0 --port ${FRONT_INTERNAL_PORT}",/' ./frontend/package.json
}

function main() {
    banner
    banner_separation
    init_backend_project 
    banner_separation
    init_frontend_project
    docker-compose build --no-cache
    docker-compose up -d
    docker-compose logs backend_package
}

main
